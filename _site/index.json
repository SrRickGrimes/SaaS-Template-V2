{
  "api/Projects.AppHost.html": {
    "href": "api/Projects.AppHost.html",
    "title": "Class AppHost",
    "summary": "Class AppHost Namespace Projects Assembly AppHost.dll public class AppHost Inheritance object AppHost Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProjectPath public static string ProjectPath { get; } Property Value string"
  },
  "api/Projects.Server.html": {
    "href": "api/Projects.Server.html",
    "title": "Class Server",
    "summary": "Class Server Namespace Projects Assembly AppHost.dll public class Server : IProjectMetadata, IResourceAnnotation Inheritance object Server Implements IProjectMetadata IResourceAnnotation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ProjectPath Gets the fully-qualified path to the project. public string ProjectPath { get; } Property Value string"
  },
  "api/Projects.html": {
    "href": "api/Projects.html",
    "title": "Namespace Projects",
    "summary": "Namespace Projects Classes AppHost Server"
  },
  "api/Server.Controllers.WeatherForecastController.html": {
    "href": "api/Server.Controllers.WeatherForecastController.html",
    "title": "Class WeatherForecastController",
    "summary": "Class WeatherForecastController Namespace Server.Controllers Assembly Server.dll [ApiController] [Route(\"[controller]\")] public class WeatherForecastController : ControllerBase Inheritance object ControllerBase WeatherForecastController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.Problem(string, string, int?, string, string, IDictionary<string, object>) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary, IDictionary<string, object>) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WeatherForecastController(ILogger<WeatherForecastController>) public WeatherForecastController(ILogger<WeatherForecastController> logger) Parameters logger ILogger<WeatherForecastController> Methods Get() [HttpGet(Name = \"GetWeatherForecast\")] public IEnumerable<WeatherForecast> Get() Returns IEnumerable<WeatherForecast>"
  },
  "api/Server.Controllers.html": {
    "href": "api/Server.Controllers.html",
    "title": "Namespace Server.Controllers",
    "summary": "Namespace Server.Controllers Classes WeatherForecastController"
  },
  "api/Server.EndPoints.GetWeatherForecastEndpoint.html": {
    "href": "api/Server.EndPoints.GetWeatherForecastEndpoint.html",
    "title": "Class GetWeatherForecastEndpoint",
    "summary": "Class GetWeatherForecastEndpoint Namespace Server.EndPoints Assembly Server.dll public class GetWeatherForecastEndpoint : EndpointWithoutRequest<IEnumerable<WeatherForecast>>, IEndpoint, IEventBus, IServiceResolverBase, INoRequest Inheritance object BaseEndpoint Endpoint<EmptyRequest, IEnumerable<WeatherForecast>> EndpointWithoutRequest<IEnumerable<WeatherForecast>> GetWeatherForecastEndpoint Implements IEndpoint IEventBus IServiceResolverBase INoRequest Inherited Members EndpointWithoutRequest<IEnumerable<WeatherForecast>>.HandleAsync(EmptyRequest, CancellationToken) EndpointWithoutRequest<IEnumerable<WeatherForecast>>.ExecuteAsync(CancellationToken) EndpointWithoutRequest<IEnumerable<WeatherForecast>>.ExecuteAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.HandleAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ExecuteAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.TryResolve<TService>() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.TryResolve(Type) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Resolve<TService>() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Resolve(Type) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.CreateScope() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.TryResolve<TService>(string) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.TryResolve(Type, string) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Resolve<TService>(string) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Resolve(Type, string) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Route<T>(string, bool) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Query<T>(string, bool) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.FormFileSectionsAsync(CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.FormMultipartSectionsAsync(CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.PublishAsync<TEvent>(TEvent, Mode, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.CreateTokenWith<TService>(string, Action<UserPrivileges>, EmptyRequest) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ProcessorState<TState>() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.OnBeforeValidate(EmptyRequest) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.OnBeforeValidateAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.OnAfterValidate(EmptyRequest) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.OnAfterValidateAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.OnBeforeHandle(EmptyRequest) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.OnBeforeHandleAsync(EmptyRequest, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.OnAfterHandle(EmptyRequest, IEnumerable<WeatherForecast>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.OnAfterHandleAsync(EmptyRequest, IEnumerable<WeatherForecast>, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.OnValidationFailed() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.OnValidationFailedAsync(CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendAsync(IEnumerable<WeatherForecast>, int, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendResultAsync(IResult) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendInterceptedAsync(object, int, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendCreatedAtAsync<TEndpoint>(object, IEnumerable<WeatherForecast>, Http?, int?, bool, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendCreatedAtAsync(string, object, IEnumerable<WeatherForecast>, bool, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendStringAsync(string, int, string, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendOkAsync(IEnumerable<WeatherForecast>, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendOkAsync(CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendErrorsAsync(int, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendNoContentAsync(CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendNotFoundAsync(CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendUnauthorizedAsync(CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendForbiddenAsync(CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendRedirectAsync(string, bool, bool) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendHeadersAsync(Action<IHeaderDictionary>, int, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendBytesAsync(byte[], string, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendFileAsync(FileInfo, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendStreamAsync(Stream, string, long?, string, DateTimeOffset?, bool, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendEventStreamAsync<T>(string, IAsyncEnumerable<T>, CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SendEmptyJsonObject(CancellationToken) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.AccessControl(string, Apply?, params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.AccessControl(string, params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.AllowAnonymous(params Http[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.AllowAnonymous(string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.AllowFileUploads(bool) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.AllowFormData(bool) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.AuthSchemes(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Claims(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ClaimsAll(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Delete(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Delete(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Description(Action<RouteHandlerBuilder>, bool) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.DontAutoSendResponse() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.DontAutoTag() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.DontCatchExceptions() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.DontThrowIfValidationFails() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.EnableAntiforgery() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Get(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Get(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Group<TEndpointGroup>() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Head(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Head(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Idempotency(Action<IdempotencyOptions>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Options(Action<RouteHandlerBuilder>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Patch(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Patch(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Permissions(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.PermissionsAll(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Policy(Action<AuthorizationPolicyBuilder>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Policies(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Post(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Post(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.PostProcessor<TPostProcessor>() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.PostProcessors(params IPostProcessor<EmptyRequest, IEnumerable<WeatherForecast>>[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.PreProcessor<TPreProcessor>() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.PreProcessors(params IPreProcessor<EmptyRequest>[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Put(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Put(string, Expression<Func<EmptyRequest, object>>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.RequestBinder(IRequestBinder<EmptyRequest>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ResponseCache(int, ResponseCacheLocation, bool, string, string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ResponseInterceptor(IResponseInterceptor) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Roles(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.RoutePrefixOverride(string) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Routes(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SerializerContext<TContext>(TContext) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.SerializerContext<TContext>() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Summary(Action<EndpointSummary>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Summary(Action<EndpointSummary<EmptyRequest>>) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Summary(EndpointSummary) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Tags(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Throttle(int, double, string) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Validator<TValidator>() Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Verbs(params Http[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Verbs(params string[]) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Version(int, int) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.AddError(ValidationFailure) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.AddError(string, string, Severity) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.AddError(Expression<Func<EmptyRequest, object>>, string, string, Severity) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ThrowError(ValidationFailure, int?) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ThrowError(string, int?) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ThrowError(Expression<Func<EmptyRequest, object>>, string, int?) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ThrowIfAnyErrors(int?) Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.User Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Response Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Config Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Env Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Logger Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.BaseURL Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.HttpMethod Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Form Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.Files Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ResponseStarted Endpoint<EmptyRequest, IEnumerable<WeatherForecast>>.ValidationFailed BaseEndpoint.Verbs(params string[]) BaseEndpoint.Routes(params string[]) BaseEndpoint.Group<TEndpointGroup>() BaseEndpoint.GetAclHash(string) BaseEndpoint.Definition BaseEndpoint.HttpContext BaseEndpoint.ValidationFailures object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure() use this method to configure how the endpoint should be listening to incoming requests. HINT: it is only called once during endpoint auto registration during app startup. public override void Configure() HandleAsync(CancellationToken) the handler method for the endpoint. this method is called for each request received. public override Task HandleAsync(CancellationToken ct) Parameters ct CancellationToken a cancellation token Returns Task"
  },
  "api/Server.EndPoints.html": {
    "href": "api/Server.EndPoints.html",
    "title": "Namespace Server.EndPoints",
    "summary": "Namespace Server.EndPoints Classes GetWeatherForecastEndpoint"
  },
  "api/Server.WeatherForecast.html": {
    "href": "api/Server.WeatherForecast.html",
    "title": "Class WeatherForecast",
    "summary": "Class WeatherForecast Namespace Server Assembly Server.dll public class WeatherForecast Inheritance object WeatherForecast Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Date public DateOnly Date { get; set; } Property Value DateOnly Summary public string? Summary { get; set; } Property Value string TemperatureC public int TemperatureC { get; set; } Property Value int TemperatureF public int TemperatureF { get; } Property Value int"
  },
  "api/Server.html": {
    "href": "api/Server.html",
    "title": "Namespace Server",
    "summary": "Namespace Server Classes WeatherForecast"
  },
  "docs/docfx.html": {
    "href": "docs/docfx.html",
    "title": "DocFX: Documentation and API Reference Generator",
    "summary": "DocFX: Documentation and API Reference Generator What is DocFX? DocFX is a comprehensive documentation generation tool specifically designed for technical documentation. It converts multiple sources into a cohesive documentation website, including: .NET assembly files XML code comments REST API Swagger/OpenAPI specifications Markdown content The output can be rendered as HTML pages, JSON models, or PDF files, making it versatile for various documentation needs. Key Features Multiple Input Sources: Combines API documentation with conceptual content Cross-platform: Works on Windows, macOS, and Linux Highly Customizable: Templates, themes, and plugins available Metadata Extraction: Automatically extracts documentation from .NET code and XML comments Modern Output: Generates responsive, searchable websites PDF Generation: Creates professional PDF documentation (requires Node.js) Installation Guide Prerequisites Before installing DocFX, ensure you have: Required: .NET SDK 8.0 or higher Optional: Node.js v20 or higher (needed only for PDF generation) Basic familiarity with command-line operations Installation Steps DocFX is distributed as a .NET tool. To install it globally on your system: dotnet tool update -g docfx This command will install the latest version of DocFX as a global tool, making it available from any directory. Getting Started Creating a New Documentation Project To create a new documentation project: docfx init This interactive command will guide you through setting up a new DocFX project in your current directory. It will create the necessary configuration files and folder structure. Building Your Documentation Once you've created a project, you can build it with: docfx docfx.json --serve This command: Builds your documentation based on the configuration in docfx.json Starts a local web server Makes your documentation available at http://localhost:8080 Previewing Changes To preview changes as you work: Save your changes to content files In a new terminal window, run: docfx docfx.json Refresh your browser to see the updated content Understanding DocFX DocFX brings together static documentation pages and .NET API documentation in a seamless way. It supports both C# and VB.NET projects, utilizing the standard XML comment syntax for code documentation. For example, this C# code with XML comments: /// <summary> /// Calculates the age of a person on a certain date based on the supplied date of birth. Takes account of leap years, /// using the convention that someone born on 29th February in a leap year is not legally one year older until 1st March /// of a non-leap year. /// </summary> /// <param name=\"dateOfBirth\">Individual's date of birth.</param> /// <param name=\"date\">Date at which to evaluate age at.</param> /// <returns>Age of the individual in years (as an integer).</returns> /// <remarks>This code is not guaranteed to be correct for non-UK locales, as some countries have skipped certain dates /// within living memory.</remarks> public static int AgeAt(this DateOnly dateOfBirth, DateOnly date) { int age = date.Year - dateOfBirth.Year; return dateOfBirth > date.AddYears(-age) ? --age : age; } Will be transformed into well-formatted API documentation with proper sections for description, parameters, return values, and remarks. Next Steps After setting up your basic documentation: Customize your theme: Modify templates to match your brand Add navigation: Create a meaningful table of contents Include examples: Add code snippets and examples Set up CI/CD: Automate documentation builds with GitHub Actions or Azure DevOps Resources Official DocFX Documentation GitHub Repository Sample Projects"
  },
  "docs/fastendpoints.html": {
    "href": "docs/fastendpoints.html",
    "title": "FastEndpoints: A Modern Minimal API Framework for .NET",
    "summary": "FastEndpoints: A Modern Minimal API Framework for .NET What is FastEndpoints? FastEndpoints is a powerful, developer-friendly API framework for .NET that provides a clean, code-first approach to building HTTP endpoints. It combines the performance benefits of minimal APIs with the organization and structure of a controller-based architecture, offering the best of both worlds. Key Features High Performance: Optimized for speed with minimal overhead Minimal API Approach: Clean, focused endpoint implementation Structured Organization: Each endpoint in its own class for better separation of concerns Request/Response Pattern: Built-in support for strong typing of requests and responses Validation: Built-in validation capabilities Testing: First-class support for integration testing Low Ceremony: Minimal boilerplate code required Installation Guide Prerequisites Before installing FastEndpoints, ensure you have: .NET SDK: .NET 6.0 or higher Installation Steps To create a new project and install FastEndpoints: dotnet new web -n MyWebApp cd MyWebApp dotnet add package FastEndpoints Getting Started Setting Up Your Application First, configure your application in Program.cs: using FastEndpoints; var bld = WebApplication.CreateBuilder(); bld.Services.AddFastEndpoints(); var app = bld.Build(); app.UseFastEndpoints(); app.Run(); Creating Your First Endpoint Follow these steps to create a simple endpoint: 1. Create a Request DTO // MyRequest.cs public class MyRequest { public string FirstName { get; set; } public string LastName { get; set; } public int Age { get; set; } } 2. Create a Response DTO // MyResponse.cs public class MyResponse { public string FullName { get; set; } public bool IsOver18 { get; set; } } 3. Create an Endpoint Class // MyEndpoint.cs public class MyEndpoint : Endpoint<MyRequest, MyResponse> { public override void Configure() { Post(\"/api/user/create\"); AllowAnonymous(); } public override async Task HandleAsync(MyRequest req, CancellationToken ct) { await SendAsync(new() { FullName = req.FirstName + \" \" + req.LastName, IsOver18 = req.Age > 18 }); } } 4. Run and Test Start your application and send a POST request to /api/user/create with a JSON body like: { \"FirstName\": \"Marlon\", \"LastName\": \"Brando\", \"Age\": 40 } You should receive a response: { \"FullName\": \"Marlon Brando\", \"IsOver18\": true } Understanding Endpoint Types FastEndpoints offers four different base types for endpoints: Endpoint<TRequest> For endpoints with only a request DTO Can still send serializable responses Endpoint<TRequest, TResponse> For endpoints with both request and response DTOs Provides strongly-typed access for testing and validation EndpointWithoutRequest For endpoints with no request or response DTOs Can send any serializable object as response EndpointWithoutRequest<TResponse> For endpoints with no request DTO but with a response DTO You can also use EmptyRequest and EmptyResponse types: public class MyEndpoint : Endpoint<EmptyRequest, EmptyResponse> { } Fluent Generics FastEndpoints offers a fluent syntax for endpoint definition: // Equivalent of Endpoint<TRequest> public class MyEndpoint : Ep.Req<MyRequest>.NoRes { } // Equivalent of Endpoint<TRequest,TResponse> public class MyEndpoint : Ep.Req<MyRequest>.Res<MyResponse> { } // Equivalent of EndpointWithoutRequest public class MyEndpoint : Ep.NoReq.NoRes { } // Equivalent of EndpointWithoutRequest<TResponse> public class MyEndpoint : Ep.NoReq.Res<MyResponse> { } Sending Responses There are multiple ways to send responses: Using the Response Property You can simply populate the Response property: public override async Task HandleAsync(CancellationToken ct) { var person = await dbContext.GetFirstPersonAsync(); Response.FullName = person.FullName; Response.Age = person.Age; } Or assign a new instance to it: public override Task HandleAsync(CancellationToken ct) { Response = new() { FullName = \"john doe\", Age = 124 }; return Task.CompletedTask; } Using Union Types (.NET 7+) FastEndpoints supports union types for multiple possible responses: public class MyEndpoint : Endpoint<MyRequest, Results<Ok<MyResponse>, NotFound, ProblemDetails>> { public override void Configure() { ... } public override async Task<Results<Ok<MyResponse>, NotFound, ProblemDetails>> ExecuteAsync( MyRequest req, CancellationToken ct) { await Task.CompletedTask; // Simulate async work if (req.Id == 0) // Condition for a not found response { return TypedResults.NotFound(); } if (req.Id == 1) // Condition for a problem details response { AddError(r => r.Id, \"value has to be greater than 1\"); return new FastEndpoints.ProblemDetails(ValidationFailures); } // 200 OK response with a DTO return TypedResults.Ok(new MyResponse { RequestedId = req.Id }); } } Configuring with Attributes Instead of overriding the Configure() method, you can use attributes: [HttpPost(\"/my-endpoint\")] [Authorize(Roles = \"Admin,Manager\")] [PreProcessor<MyProcessor>] public class MyEndpoint : Endpoint<MyRequest, MyResponse> { // ... } Available attributes include: [Http{VERB}(\"/route\")] - Sets up verb and route [AllowAnonymous] - Allows unauthenticated access [AllowFileUploads] - Allows file uploads with multipart/form-data [Authorize(...)] - Specifies authorization requirements [Group<TGroup>] - Associates endpoint with a configuration group [PreProcessor<TProcessor>] - Adds a pre-processor [PostProcessor<TProcessor>] - Adds a post-processor Working with Cancellation Tokens FastEndpoints provides cancellation token support for asynchronous operations: public override async Task HandleAsync(MyRequest req, CancellationToken ct) { // Pass the token to your async methods var data = await _repository.GetDataAsync(ct); // No need to explicitly pass the token to SendAsync // It automatically uses the same token from HandleAsync await SendAsync(new MyResponse { ... }); } Next Steps After mastering the basics: Add validation to your request DTOs Implement authorization for secure endpoints Set up dependency injection for your endpoints Create integration tests for your API Explore more advanced features like versioning and documentation Resources Official GitHub Repository Documentation NuGet Package"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE.",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}